void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/open-media-streamer/oms-client-javascript"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/conference"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}


pipeline {
    agent any
    stages {
        stage('Unit test') {
            steps {
                podTemplate(name: 'unit-test', label: 'unit-test', cloud: 'kubernetes', containers: [
                    containerTemplate(name: 'unit-test', image: "$env.TEST_IMAGE",  ttyEnabled: true, alwaysPullImage: true, privileged: true, network: 'host', command: 'cat')
                    ]) {
                    node('unit-test') {
                        container('unit-test') {
                           sh "cd /root/oms-client-javascript/test/unit/karma-test/ && ./start.sh"
                        }
                    }
                }
            }
        }
        stage('Build package') {
            steps {
                podTemplate(name: 'pack', label: 'pack-mcu', containers: [
                    containerTemplate(name: 'pack-on-centos', image: "$env.PACK_IMAGE",  ttyEnabled: true, alwaysPullImage: true, privileged: true, network: 'host', command: 'cat')
                ]){
                    node ('pack-mcu') {
                      container ('pack-on-centos') {
                        sh "/root/packSDKInDocker.sh software $env.CHANGE_BRANCH $env.GIT_BRANCH $env.CHANGE_ID"
                      }
                    }
                }
            }
        }

        stage('Start test') {
            parallel {
                stage('API test') {
                    steps {
                        podTemplate(name: 'api-test', label: 'api-test', cloud: 'kubernetes', containers: [
                            containerTemplate(name: 'api-test', image: "$env.TEST_IMAGE",  ttyEnabled: true, alwaysPullImage: true, privileged: true, network: 'host', command: 'cat'),
                            ]) {
                        
                            node('api-test') {
                              container('api-test') {
                                   sh "/root/start.sh ${env.GIT_BRANCH}1 ConferenceClient_api"
                              }
                            }
                        }
                    }
                }

                stage('Subscribe test') {
                    steps {
                        podTemplate(name:'subscribe-test', label: 'subscribe-test', cloud: 'kubernetes', containers: [
                            containerTemplate(name: 'subscribe-test', image: "$env.TEST_IMAGE",  ttyEnabled: true, alwaysPullImage: true, privileged: true, network: 'host', command: 'cat'),
                            ]) {
                        
                            node('subscribe-test') {
                              container('subscribe-test') {
                                  sh "/root/start.sh ${env.GIT_BRANCH}2 ConferenceClient_subscribe"
                              }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            setBuildStatus("Build succeeded", "SUCCESS");
        }
        failure {
            setBuildStatus("Build failed", "FAILURE");
        }
    }
}

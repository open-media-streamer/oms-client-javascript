void setBuildStatus(String message, String state) {
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: "${REPO_URL}/owt-client-javascript"],
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/conference"],
        errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]]]
    ]);
}




pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        stage('Unit test') {
            steps {
                podTemplate(name: 'unit-test', label: 'unit-test', cloud: 'kubernetes', containers: [
                    containerTemplate(name: 'unit-test', image: "$env.centos_test_images", ttyEnabled: true, alwaysPullImage: true, privileged: true, resourceRequestCpu: '500m', resourceLimitCpu: '1000m', resourceLimitMemory: '1.0Gi', resourceRequestMemory: '0.5Gi', network: 'host', command: 'cat')
                ]) {
                    node('unit-test') {
                        container('unit-test') {
                            sh "cd /root/owt-client-javascript/test/unit/karma-test/ && ./start.sh $env.GIT_BRANCH $env.CHANGE_ID"
                        }
                    }
                }
            }
        }
        stage('Build package') {
            options { timeout(time: 20, unit: 'MINUTES') }
            steps {
                podTemplate(name: 'pack', label: 'pack-mcu',
                volumes: [
                persistentVolumeClaim(claimName: 'stability-package',mountPath: '/root/stabilityPackage',readOnly: false),
                persistentVolumeClaim(claimName: 'js-centos-package',mountPath: '/root/centos_package',readOnly: false)
                ],
                containers: [
                    containerTemplate(name: 'pack-on-centos', image: "$env.centos_build_images", ttyEnabled: true, alwaysPullImage: true, privileged: true, resourceRequestCpu: '1000m', resourceLimitCpu: '1500m', resourceLimitMemory: '1.5Gi', resourceRequestMemory: '1.0Gi', network: 'host', command: 'cat')
                ]){
                    node('pack-mcu') {
                        container('pack-on-centos') {
                            sh "/root/startRun.sh $env.gitlab_username $env.gitlab_password centos build javascript $env.GIT_BRANCH $env.GIT_COMMIT $env.CHANGE_ID"
                        }
                    }
                }
            }
        }

        stage('Start test') {
            options { timeout(time: 40, unit: 'MINUTES') }
            parallel {
                stage('ConferenceClient API 1') {
                    steps {
                        podTemplate(name: 'api-test', label: 'api-test', cloud: 'kubernetes',
                        volumes: [
                              persistentVolumeClaim(claimName: 'js-centos-package', mountPath: '/root/centos_package', readOnly: false),
                              persistentVolumeClaim(claimName: 'audio-lib', mountPath: '/root/audio_lib',readOnly: false),
                              persistentVolumeClaim(claimName: 'recording-lib', mountPath: '/root/recording_lib',readOnly: false),
                              persistentVolumeClaim(claimName: 'sip-lib', mountPath: '/root/sip_lib',readOnly: false),
                              persistentVolumeClaim(claimName: 'streaming-lib', mountPath: '/root/streaming_lib', readOnly: false),
                              persistentVolumeClaim(claimName: 'video-lib', mountPath: '/root/video_lib',readOnly: false),
                              persistentVolumeClaim(claimName: 'js-centos-log', mountPath: '/root/centos_log', readOnly: false)
                              ],
                        containers: [
                            containerTemplate(name: 'api-test', image: "$env.centos_test_images", ttyEnabled: true, alwaysPullImage: true, privileged: true, resourceRequestCpu: '2000m', resourceLimitCpu: '6000m', resourceLimitMemory: '9.0Gi', resourceRequestMemory: '8.0Gi', network: 'host', command: 'cat'),
                        ]) {

                            node('api-test') {
                                container('api-test') {
                                    sh "/root/startRun.sh $env.gitlab_username $env.gitlab_password centos test ${env.GIT_COMMIT} ConferenceClient_API_1"
                                }
                            }
                        }
                    }
                }

                stage('ConferenceClient API 2') {
                    steps {
                        podTemplate(name: 'subscribe-test', label: 'subscribe-test', cloud: 'kubernetes',
                        volumes: [
                              persistentVolumeClaim(claimName: 'js-centos-package', mountPath: '/root/centos_package', readOnly: false),
                              persistentVolumeClaim(claimName: 'audio-lib', mountPath: '/root/audio_lib',readOnly: false),
                              persistentVolumeClaim(claimName: 'recording-lib', mountPath: '/root/recording_lib',readOnly: false),
                              persistentVolumeClaim(claimName: 'sip-lib', mountPath: '/root/sip_lib',readOnly: false),
                              persistentVolumeClaim(claimName: 'streaming-lib', mountPath: '/root/streaming_lib', readOnly: false),
                              persistentVolumeClaim(claimName: 'video-lib', mountPath: '/root/video_lib',readOnly: false),
                              persistentVolumeClaim(claimName: 'js-centos-log', mountPath: '/root/centos_log', readOnly: false)
                              ],
                        containers: [
                            containerTemplate(name: 'subscribe-test', image: "$env.centos_test_images", ttyEnabled: true, alwaysPullImage: true, privileged: true, resourceRequestCpu: '2000m', resourceLimitCpu: '6000m', resourceLimitMemory: '9.0Gi', resourceRequestMemory: '8.0Gi', network: 'host', command: 'cat'),
                        ]) {

                            node('subscribe-test') {
                                container('subscribe-test') {
                                    sh "/root/startRun.sh $env.gitlab_username $env.gitlab_password centos test ${env.GIT_COMMIT} ConferenceClient_API_2"
                                }
                            }
                        }
                    }
                }
                stage('ConferenceClient API 3') {
                    steps {
                        podTemplate(name:'simucast-test-server', label: 'simucast-test-server', cloud: 'kubernetes',
                        volumes: [
                              persistentVolumeClaim(claimName: 'js-centos-package', mountPath: '/root/centos_package', readOnly: false),
                              persistentVolumeClaim(claimName: 'audio-lib', mountPath: '/root/audio_lib',readOnly: false),
                              persistentVolumeClaim(claimName: 'recording-lib', mountPath: '/root/recording_lib',readOnly: false),
                              persistentVolumeClaim(claimName: 'sip-lib', mountPath: '/root/sip_lib',readOnly: false),
                              persistentVolumeClaim(claimName: 'streaming-lib', mountPath: '/root/streaming_lib', readOnly: false),
                              persistentVolumeClaim(claimName: 'video-lib', mountPath: '/root/video_lib',readOnly: false),
                              persistentVolumeClaim(claimName: 'js-centos-log', mountPath: '/root/centos_log', readOnly: false)
                              ],
                        containers: [
                            containerTemplate(name: 'simucast-test-server', image: "$env.centos_test_images",  ttyEnabled: true, alwaysPullImage: true, privileged: true, resourceRequestCpu: '2000m', resourceLimitCpu: '6000m',resourceLimitMemory: '9.0Gi', resourceRequestMemory: '8.0Gi', network: 'host', command: 'cat'),
                            ]) {
                            node('simucast-test-server') {
                                container('simucast-test-server') {
                                    sh "/root/startRun.sh $env.gitlab_username $env.gitlab_password centos test ${env.GIT_COMMIT} ConferenceClient_API_3"
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                sh "curl -H \"Content-Type: application/json\" -X POST --data '{\"commit_id\":\"'$GIT_COMMIT'\",\"job_path\":\"'${env.JS_CHECK_PATH}'\",\"job_name\":\"'$JOB_BASE_NAME'\",\"build_num\":\"'$BUILD_NUMBER'\",\"os_version\":\"'$env.CENTOS_VERSION'\"}' '${env.checkServerUrl}'/runServer/JS_BUILD_CONFERENCE_STEPS"
            }
        }
        success {
            setBuildStatus("Build succeeded", "SUCCESS");
        }
        failure {
            setBuildStatus("Build failed", "FAILURE");
        }
    }
}
